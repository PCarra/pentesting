#Custom password generator

import sys, argparse, os
from itertools import permutations

def create_permutation(char_list):
    perm_list = list(permutations(char_list))
    return perm_list

def write_to_file(password):
    with open('wordlist.txt', 'a') as f:
        f.write(password + '\n')
    

parser = argparse.ArgumentParser(description='Script used to generate a custom password dictionary')
parser.add_argument('--base_list', type=str, required=False, help='First value path to base password list')
parser.add_argument('--min_length', type=int, required=False, help='Second value minimum length of password')
parser.add_argument('--max_length', type=int, required=False, help='Third value maximum length of password')
parser.add_argument('--add_chars', type=str, required=False, help='Fourth value path to file containing characters to add')
parser.add_argument('--add_nums', type=str, required=False, help='Fifth Adds numbers 0-9 to the permutation set to True or False')
args = parser.parse_args()
'''
print(args.base_list)
print(args.min_length)
print(args.max_length)
print(args.add_chars)
'''

if os.path.isfile('wordlist.txt'):
    os.remove('wordlist.txt')


if args.base_list:
    with open(args.base_list) as f:
        base_list = [line.rstrip('\n') for line in f]
    print(base_list)

if args.add_chars:
    with open(args.add_chars) as f:
        chars_list = [line.rstrip('\n') for line in f]
    print(chars_list)

spec_list = ['!', '@', '#', '$', '%', '^']
num_list = [num for num in range(0, 10)]
char_list = spec_list + num_list

num = 0
for word in base_list:
    for char in char_list:
        password = word + str(char)
        write_to_file(password)